{"version":3,"sources":["Settings.js","App.js","serviceWorker.js","index.js"],"names":["Settings","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handlePollIntervalChange","bind","assertThisInitialized","handleMaxDistanceChange","_this$props","_this$props$pollInter","pollInterval","_this$props$maxDistan","maxDistance","react_default","a","createElement","className","id","name","type","value","onChange","min","step","event","parseInt","target","Component","sortDistance","left","right","distance","App","state","active","settings","JSON","parse","localStorage","getItem","handleToggle","handleSettingsChange","setStatePromise","_this2","Promise","resolve","setState","_this$state","scooters","toggleIconClass","concat","label","onClick","src_Settings_0","assign","length","version","_this3","then","requestPermission","startPolling","stopPolling","_this4","window","setItem","stringify","handleDataChange","permission","reject","api","_this5","fetchBlinkee","poller","setInterval","locationWatch","navigator","geolocation","watchPosition","_ref","location","coords","clearInterval","clearWatch","closest","undefined","fetch","res","json","_ref2","data","items","filter","_ref3","map","_ref4","position","_this$state2","_this$state2$location","latitude","longitude","_this$state2$scooters","withDistance","scooter","lat","lng","sort","notifyUser","Notification","dist","Math","ceil","serviceWorker","ready","registration","showNotification","icon","body","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","register","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","response","status","headers","get","indexOf","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.bd8657a6.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './Settings.css';\n\nclass Settings extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handlePollIntervalChange = this.handlePollIntervalChange.bind(this);\n    this.handleMaxDistanceChange = this.handleMaxDistanceChange.bind(this);\n  }\n  render() {\n    const {\n      pollInterval = 60,\n      maxDistance = 500\n    } = this.props;\n\n    return (\n      <form className=\"settings\">\n        Check every <input\n          id=\"pollInterval\"\n          name=\"pollInterval\"\n          type=\"number\"\n          value={pollInterval}\n          onChange={this.handlePollIntervalChange}\n          min={15}\n          step={15}\n        /> seconds<br />\n        Notify when Blinkee within <input\n          id=\"maxDistance\"\n          name=\"maxDistance\"\n          type=\"number\"\n          value={maxDistance}\n          onChange={this.handleMaxDistanceChange}\n          min={100}\n          step={100}\n        /> meters\n      </form>\n    );\n  }\n  handlePollIntervalChange(event) {\n    const pollInterval = parseInt(event.target.value, 10);\n\n    return this.props.onChange({pollInterval});\n  }\n  handleMaxDistanceChange(event) {\n    const maxDistance = parseInt(event.target.value, 10);\n\n    return this.props.onChange({maxDistance});\n  }\n}\n\nSettings.propTypes = {\n  pollInterval: PropTypes.number,\n  onChange: PropTypes.func.isRequired\n};\n\nexport default Settings;\n","import React, { Component } from 'react';\nimport './App.css';\nimport distance from 'gps-distance';\nimport Settings from './Settings';\nimport {version} from '../package.json';\n\nconst sortDistance = (left, right) => {\n  if (left.distance < right.distance) {\n    return -1;\n  }\n\n  if (right.distance < left.distance) {\n    return 1;\n  }\n\n  return 0;\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      active: false,\n      settings: JSON.parse(localStorage.getItem('settings')) || {\n        pollInterval: 60,\n        maxDistance: 500\n      }\n    };\n\n    this.handleToggle = this.handleToggle.bind(this);\n    this.handleSettingsChange = this.handleSettingsChange.bind(this);\n    this.setStatePromise = this.setStatePromise.bind(this);\n  }\n  setStatePromise(state) {\n    return new Promise(resolve => {\n      this.setState(state, () => {\n        resolve()\n      });\n    });\n  }\n  render() {\n    const {\n      active,\n      settings,\n      scooters\n    } = this.state;\n\n    const toggleIconClass = `icon fas fa-toggle-${active ? 'on' : 'off'}`;\n    const label = active ? 'on' : 'off';\n\n    return (\n      <div>\n        <div className=\"toggle\" onClick={this.handleToggle}>\n          <i className={toggleIconClass} /> {label}\n        </div>\n        <Settings\n          {...settings}\n          onChange={this.handleSettingsChange}\n        />\n        <footer>\n          <div>\n            {scooters &&\n              `${scooters.length} blinkees available - `\n            }\n            version {version}\n          </div>\n        </footer>\n      </div>\n    );\n  }\n  handleToggle() {\n    const active = !this.state.active;\n\n    return this.setStatePromise({active})\n      .then(() => {\n        if (!active) {\n          return this.stopPolling();\n        }\n\n        return this.requestPermission('Notification')\n          .then(() => this.startPolling());\n      });\n  }\n  handleSettingsChange(settings) {\n    this.setStatePromise({settings: Object.assign({}, this.state.settings, settings)})\n      .then(() => {\n        window.localStorage.setItem('settings', JSON.stringify(this.state.settings));\n      })\n      .then(() => {\n        this.handleDataChange();\n      });\n\n    return Promise.resolve();\n  }\n  requestPermission(permission) {\n    if (!(permission in window)) {\n      return Promise.reject();\n    }\n\n    const api = window[permission];\n\n    if (api.permission === 'denied') {\n      return Promise.reject();\n    }\n\n    if (api.permission === 'granted') {\n      return Promise.resolve();\n    }\n\n    return api.requestPermission();\n  }\n  startPolling() {\n    const {pollInterval} = this.state.settings;\n\n    if (pollInterval && pollInterval >= 15) {\n      this.fetchBlinkee()\n        .then(() => this.handleDataChange());\n      this.poller = setInterval(() => {\n        this.fetchBlinkee()\n          .then(() => this.handleDataChange());\n      }, pollInterval * 1000);\n    }\n\n    this.locationWatch = navigator.geolocation.watchPosition(({coords: location}) => {\n      this.setStatePromise({location})\n        .then(() => this.handleDataChange());\n    });\n\n    return Promise.resolve();\n  }\n  stopPolling() {\n    clearInterval(this.poller);\n    delete this.poller;\n\n    navigator.geolocation.clearWatch(this.locationWatch);\n    delete this.locationWatch;\n\n    delete this.closest;\n\n    return this.setStatePromise({scooters: undefined, location: undefined});\n  }\n  fetchBlinkee() {\n    return fetch('https://blinkee.city/api/regions/11/vehicles')\n      .then(res => res.json())\n      .then(({data: {items: vehicles}}) => {\n        return {scooters: vehicles\n          .filter(({type}) => type === 'scooter')\n          .map(({id, position}) => ({id, position}))\n        };\n      })\n      .then(this.setStatePromise);\n  }\n  handleDataChange() {\n    const {\n      location: {\n        latitude,\n        longitude\n      } = {},\n      scooters = [],\n      settings: {\n        maxDistance\n      }\n    } = this.state;\n\n    if (maxDistance && maxDistance >= 100 && latitude && longitude) {\n      const withDistance = scooters.map(scooter =>\n          Object.assign({}, scooter, {distance: distance(\n            latitude,\n            longitude,\n            scooter.position.lat,\n            scooter.position.lng\n          ) * 1000})\n        )\n        .sort(sortDistance);\n\n      if (withDistance.length > 0) {\n        const closest = withDistance[0];\n\n        if (closest.distance < maxDistance) {\n          if (!this.closest || (closest.distance < this.closest.distance && closest.id !== this.closest.id)) {\n            this.closest = closest;\n\n            this.notifyUser();\n          }\n        }\n      }\n    }\n  }\n  notifyUser() {\n    if (Notification.permission === 'granted') {\n      const dist = Math.ceil(this.closest.distance);\n\n      navigator.serviceWorker.ready.then(registration => {\n        registration.showNotification('blinkee close by!', {\n          icon: 'favicon.png',\n          body: `Blinkee parked at ${dist + ''} meters.`\n        });\n      });\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}
{"version":3,"sources":["Location.js","App.js","serviceWorker.js","index.js"],"names":["round","digits","float","Math","pow","Location","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","loadLocation","then","onChange","_this$props","latitude","longitude","react_default","a","createElement","href","concat","_this2","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","location","setState","_location$coords","coords","error","Component","App","vehicles","JSON","parse","localStorage","getItem","handleLocationChange","bind","assertThisInitialized","handleReload","timestamp","loadData","closest","closestId","closestDistance","_this$state","_this$state$location","_this$state$vehicles","_this$state$distances","distances","Map","size","_Array$from$","slicedToArray","Array","from","items","find","_ref","id","src_Location","totalItems","Date","toString","onClick","position","lat","lng","calculateDistances","_this3","fetch","res","json","_ref2","data","window","setItem","stringify","_ref3","arguments","length","undefined","_ref4$items","toConsumableArray","map","vehicle","assign","objectSpread","distance","sort","left","right","_ref5","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.72ce1752.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nconst round = digits => float => Math.round(float * Math.pow(10, digits)) / Math.pow(10, digits);\n\nclass Location extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n    };\n  }\n  componentDidMount() {\n    this.loadLocation()\n      .then(this.props.onChange);\n  }\n  render() {\n    const {\n      latitude,\n      longitude\n    } = this.props;\n\n    return (\n      <div>\n      {(!latitude || !longitude) &&\n        <div>Location access is required.</div>\n      }\n      {latitude && longitude &&\n        <div>\n          Your location: <a href={`https://www.google.com/maps/search/?api=1&query=${latitude},${longitude}`}>{round(4)(latitude)},{round(4)(longitude)}</a>\n        </div>\n      }\n      </div>\n    );\n  }\n  loadLocation() {\n    return new Promise((resolve, reject) => {\n      navigator.geolocation.getCurrentPosition(location => {\n        this.setState({location});\n\n        const {latitude, longitude} = location.coords;\n        resolve({latitude, longitude});\n      }, error => {\n        reject(error);\n      });\n    });\n  }\n}\n\nLocation.propTypes = {\n  latitude: PropTypes.number,\n  longitude: PropTypes.number,\n  onChange: PropTypes.func\n}\n\nexport default Location;\n","import React, { Component } from 'react';\nimport './App.css';\nimport distance from 'gps-distance';\nimport Location from './Location';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      vehicles: JSON.parse(localStorage.getItem('blinkees')) || {}\n    };\n\n    this.handleLocationChange = this.handleLocationChange.bind(this);\n    this.handleReload = this.handleReload.bind(this);\n  }\n  componentDidMount() {\n    if (!this.state.vehicles.timestamp) {\n      this.loadData();\n    }\n  }\n  render() {\n    const {\n      location: {\n        latitude,\n        longitude\n      } = {},\n      vehicles = {},\n      distances = new Map()\n    } = this.state;\n\n    let closest, closestId, closestDistance;\n\n    if (distances.size > 0) {\n      [closestId, closestDistance] = Array.from(distances)[0];\n      closest = vehicles.items.find(({id}) => id === closestId);\n    }\n\n    return (\n      <div>\n      <Location\n        latitude={latitude}\n        longitude={longitude}\n        onChange={this.handleLocationChange}\n      />\n      {vehicles.timestamp &&\n        <div>{vehicles.totalItems} blinkees loaded on {(new Date(vehicles.timestamp)).toString()}</div>\n      }\n      <button onClick={this.handleReload}>Reload blinkee data</button>\n      {closest &&\n        <div>\n          Closest vehicle: <a href={`https://www.google.com/maps/dir/?api=1&travelmode=walking&origin=${latitude},${longitude}&destination=${closest.position.lat},${closest.position.lng}`}>{closestDistance} meters</a>\n        </div>\n      }\n      </div>\n    );\n  }\n  handleLocationChange(location) {\n    return (new Promise(resolve => {\n      const distances = this.calculateDistances(location, this.state.vehicles);\n\n      this.setState({location, distances}, () => resolve());\n    }));\n  }\n  handleReload() {\n    this.loadData();\n  }\n  loadData() {\n    return fetch('https://blinkee.city/api/regions/11/vehicles')\n      .then(res => res.json())\n      .then(({data: vehicles}) => {\n        vehicles.timestamp = +(new Date());\n\n        window.localStorage.setItem('blinkees', JSON.stringify(vehicles));\n\n        return vehicles;\n      })\n      .then(vehicles => {\n        const distances = this.calculateDistances(this.state.location, vehicles);\n\n        this.setState({vehicles, distances});\n      });\n  }\n  calculateDistances({latitude, longitude} = {}, {items: vehicles = []} = {}) {\n    if (!latitude || !longitude) {\n      return new Map();\n    }\n\n    return new Map([...vehicles].map(vehicle =>\n      Object.assign({\n        distance: Math.round(distance(\n          latitude,\n          longitude,\n          vehicle.position.lat,\n          vehicle.position.lng\n        ) * 1000),\n        ...vehicle\n      })\n    ).sort((left, right) => {\n      if (left.distance < right.distance) {\n        return -1;\n      }\n\n      if (right.distance < left.distance) {\n        return 1;\n      }\n\n      return 0;\n    }).map(({id, distance}) => [id, distance]));\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}